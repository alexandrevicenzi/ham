#! /bin/bash
# by adam@l4re.org

dashless=$(basename "$0" | sed -e 's/-/ /')
USAGE="TBD"

SUBDIRECTORY_OK=Yes
START_DIR=$(pwd)

. /usr/lib/git-core/git-sh-setup
. /usr/lib/git-core/git-sh-i18n

require_work_tree
cd_to_toplevel
toplevel_dir=$(pwd)

while true; do
  case "$1" in
    -u|--upstream)
       shift
       sh_gerrit_local_upstream=$1
       shift
       ;;
    -r|--reviewer)
       shift
       if [ -z "$reviewer" ]; then
         reviewer=%r=$1
       else
         reviewer=$reviewer,r=$1
       fi
       shift
       ;;
    -n|--dry-run)
       shift
       dryrun=n
       ;;
    -v|--verbose)
       shift
       verbose=1
       ;;
    --addrepo)
       shift
       additional_repos="$additional_repos $1"
       shift
       ;;
     --onto-change-id)
       shift
       onto_change_id="$1"
       shift
       ;;
    *)
      break
      ;;
  esac
done

. $(dirname $(readlink -f $0))/git-sh-gerrit

git fetch $sh_gerrit_origin_name $sh_gerrit_branch_remote
[ $? != 0 ] && exit 1

local_upstream_hash=$(git rev-parse $sh_gerrit_local_upstream)
tmpdir=$(mktemp -d)

trap "echo rm -fr $tmpdir; rm -fr $tmpdir" 0 1 2 3 15

config_email=$(git config user.email)
config_ham_remote_revision=$(git config ham.origin.revision)
config_remote_url=$(git config remote.${sh_gerrit_origin_name}.url)
git clone -n $toplevel_dir $tmpdir || die "git clone failed"
cd $tmpdir || die "Cannot change directory to $tmpdir"
git config user.email $config_email
git config remote.origin.url $config_remote_url
git config remote.origin.ham true
git config ham.remote origin
git config ham.origin.revision $config_ham_remote_revision
reponr=1
for r in $additional_repos; do
  git remote add -f add_repo_$reponr $r
  reponr=$((reponr + 1))
done
git checkout -b remote_head $local_upstream_hash || die "git checkout failed"
git checkout -b picked_commits

if [ -n "$onto_change_id" ]; then
  ham download-id -p $onto_change_id
fi

for commit in "$@"; do
  if [ -e "$commit" ]; then
    echo "Applying: " $(git log --oneline -1 $commit)
    git am "$commit"
  else
    echo "Picking: " $(git log --oneline -1 $commit)
    git cherry-pick $commit
  fi

  if [ $? != 0 ]; then
    echo
    echo "Failed to apply:"
    git status
    git diff
    exit 1
  fi
done

echo
echo "Commits to be pushed:"
git log --oneline remote_head..picked_commits
echo "on"
git log --oneline remote_head^..remote_head
set -x
git push -v$dryrun $sh_gerrit_repo_url picked_commits:refs/for/$sh_gerrit_branch_remote$reviewer
